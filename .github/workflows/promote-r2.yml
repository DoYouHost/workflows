name: Promote firmware on Cloudflare R2

on:
  workflow_call:
    inputs:
      version:
        description: Version of the firmware to promote
        required: true
        type: string
      directory:
        description: Directory to promote the firmware to
        required: true
        type: string
      channel:
        description: Channel to upload to. "beta" or "production"
        required: false
        type: string
        default: "beta"
      manifest-filename:
        description: Filename of the manifest to write.
        required: false
        type: string
        default: manifest-beta.json

jobs:
  promote:
    name: Promote ${{ inputs.version }} to ${{ inputs.channel }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.channel }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          path: files

      - name: Build ${{ inputs.manifest-filename }}
        run: |
          mkdir -p output
          version="${{ inputs.version }}"
          manifest_filename="${{ inputs.manifest-filename }}"

          if [ -d "files/$version" ]; then
            manifest_path="files/$version/manifest.json"

            if [ -f "$manifest_path" ]; then
              mkdir -p "output/$version"
              cp -r "files/$version/"* "output/$version/"

              jq --arg version "$version" \
                '.builds[].ota.path |= $version + "/" + . | (.builds[].parts // [])[].path |= $version + "/" + .' \
                "$manifest_path" > "output/$manifest_filename"
            else
              echo "Error: Manifest not found at $manifest_path"
              exit 1
            fi
          else
            device_path=$(find files -maxdepth 1 -type d ! -name files | head -1)
            if [ -n "$device_path" ]; then
              device=$(basename "$device_path")
              manifest_path="$device_path/$version/manifest.json"

              if [ -f "$manifest_path" ]; then
                mkdir -p "output/$version"
                cp -r "$device_path/$version/"* "output/$version/"
                jq --arg version "$version" \
                  '.builds[].ota.path |= $version + "/" + . | (.builds[].parts // [])[].path |= $version + "/" + .' \
                  "$manifest_path" > "output/$manifest_filename"
              else
                echo "Error: Manifest not found at $manifest_path"
                exit 1
              fi
            else
              echo "Error: No valid structure found"
              exit 1
            fi
          fi

      - name: Upload ${{ inputs.manifest-filename }} to R2
        uses: ryand56/r2-upload-action@v1.4
        with:
          r2-account-id: ${{ secrets.CF_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.CF_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.CF_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.CF_BUCKET_NAME }}
          source-dir: output
          destination-dir: ${{ inputs.directory }}/
