name: Build

on:
  workflow_call:
    inputs:
      files:
        description: Newline separated list of files to build
        required: true
        type: string
      esphome-version:
        description: Version of ESPHome to build with
        required: false
        type: string
        default: latest
      release-summary:
        description: Summary of the release
        required: false
        type: string
        default: ""
      release-url:
        description: URL to the release notes
        required: false
        type: string
        default: ""
      release-version:
        description: Version of the release
        required: false
        type: string
        default: ""
      combined-name:
        description: Combine all files into a single manifest under this name
        required: false
        type: string
        default: ""
      debug:
        description: Enable verbose debug output
        required: false
        type: boolean
        default: false

    outputs:
      version:
        description: Version of the firmware generated
        value: ${{ jobs.prepare.outputs.version }}

jobs:
  prepare:
    name: Prepare
    runs-on: self-hosted
    outputs:
      files: ${{ steps.files-array.outputs.files }}
      version: ${{ steps.version.outputs.version }}
      artifact-prefix: ${{ steps.artifact-name.outputs.artifact-prefix }}
    steps:
      - name: Debug – Environment (pre-prepare)
        if: inputs.debug == true
        run: |
          echo "::group::Environment"
          uname -a || true
          echo "Shell: $SHELL"
          echo "Working dir: $PWD"
          echo "::endgroup::"
      - name: Split files input into JSON array
        id: files-array
        run: |
          files=$(echo "${{ inputs.files }}" | jq -RcSn '[inputs | select(length>0)]')
          echo files=$files >> $GITHUB_OUTPUT
      - name: Generate version
        id: version
        run: |
          if [ -n "${{ inputs.release-version }}" ]; then
            version=${{ inputs.release-version }}
          else
            version=dev-$(date +'%Y%m%d-%H%M')
          fi
          echo version=$version >> $GITHUB_OUTPUT
      - name: Generated random artifact prefix
        id: artifact-name
        run: |
          artifact_prefix=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 16; echo)
          echo artifact-prefix=$artifact_prefix >> $GITHUB_OUTPUT
      - name: Debug – Prepare summary
        if: inputs.debug == true
        run: |
          echo "::group::Prepare Summary"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Files JSON: ${{ steps.files-array.outputs.files }}"
          echo "Artifact prefix: ${{ steps.artifact-name.outputs.artifact-prefix }}"
          echo "::endgroup::"

  build:
    name: ${{ matrix.file }}
    needs: [prepare]
    runs-on: self-hosted
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        file: ${{ fromJson(needs.prepare.outputs.files) }}
    steps:
      - uses: actions/checkout@v5
      - name: Debug – Repo tree (initial)
        if: inputs.debug == true
        run: |
          echo "::group::Git Status"
          git status --short || true
          echo "::endgroup::"
          echo "::group::Tree (top 200 entries)"
          find . -maxdepth 3 -type f | head -200
          echo "::endgroup::"
      - name: Replace project version
        run: |
          sed -i "s/version: dev/version: ${{ needs.prepare.outputs.version }}/g" ${{ matrix.file }}
      - name: Debug – YAML excerpt after version replace
        if: inputs.debug == true
        run: |
          echo "::group::YAML head (after version replace)"
          head -60 ${{ matrix.file }} || true
          echo "::endgroup::"
      - name: Build Firmware
        id: esphome-build
        uses: esphome/build-action@v7.0.0
        with:
          yaml-file: ${{ matrix.file }}
          version: ${{ inputs.esphome-version }}
          complete-manifest: true
          release-summary: ${{ inputs.release-summary }}
          release-url: ${{ inputs.release-url }}
      - name: Debug – Raw build output directories
        if: inputs.debug == true
        run: |
          echo "::group::Raw build output directories"
          find . -maxdepth 3 -type d -print
          echo "::endgroup::"

          echo "::group::Manifest content (raw)"
          set +e
          manifests=$(find . -maxdepth 5 -name manifest.json)
          if [ -z "$manifests" ]; then
            echo "No manifest.json found"
          else
            for f in $manifests; do
              echo "----- $f -----"
              sed -n '1,160p' "$f"
              echo "Build count: $(jq '.builds | length' "$f" 2>/dev/null || echo '?')"
              echo
            done
          fi
          echo "::endgroup::"
      - name: Normalize output structure
        run: |
          set -e
          VERSION='${{ needs.prepare.outputs.version }}'
          DEVICE_OUT='${{ steps.esphome-build.outputs.name }}'
          mkdir -p output/$VERSION
          mv "$DEVICE_OUT"/* output/$VERSION/
      - name: Debug – Normalized directory
        if: inputs.debug == true
        run: |
          echo "::group::Normalized ${{ steps.esphome-build.outputs.original-name }} /$VERSION"
          find output -maxdepth 2 -type f -printf '%P (%s bytes)\\n'
          echo "::endgroup::"
          echo "::group::Normalized manifest preview"
          sed -n '1,160p' output/${{ needs.prepare.outputs.version }}/manifest.json
          echo "::endgroup::"
      - name: Upload device artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ format('{0}-{1}', needs.prepare.outputs.artifact-prefix, steps.esphome-build.outputs.original-name) }}
          path: output
      - name: Post-build debug trap (on failure)
        if: failure() && inputs.debug == true
        run: |
          echo "::group::Failure dump (build job)"
          find . -maxdepth 4 -type f -printf '%P %s bytes\\n' | head -500
          echo "::endgroup::"

  combine:
    name: Combine manifests
    needs: [prepare, build]
    runs-on: self-hosted
    if: inputs.combined-name != ''
    steps:
      - name: Download device artifacts
        uses: actions/download-artifact@v5
        with:
          path: devices
          pattern: ${{ needs.prepare.outputs.artifact-prefix }}-*
      - name: Debug – Device artifacts tree
        if: inputs.debug == true
        run: |
          echo "::group::Device artifacts file list"
          find devices -type f -printf '%P (%s bytes)\\n' | head -1000
          echo "::endgroup::"
      - name: Create combined output
        run: |
          set -e
          VERSION='${{ needs.prepare.outputs.version }}'
          mkdir -p combined/$VERSION
          mapfile -t manifests < <(find devices -type f -path "*/$VERSION/manifest.json")
          if [ ${#manifests[@]} -eq 0 ]; then
            echo "No manifest.json files found" >&2
            exit 1
          fi
          jq -s '(.[0] | del(.builds)) + {"builds": (reduce .[].builds as $b ([]; . + $b))}' "${manifests[@]}" > combined/$VERSION/manifest.json
          find devices -type f -path "*/$VERSION/*" \( -name "*.bin" -o -name "*.elf" \) -exec cp -n {} combined/$VERSION/ \;
      - name: Debug – Combined manifest validation
        if: inputs.debug == true
        run: |
          VERSION='${{ needs.prepare.outputs.version }}'
          echo "::group::Combined manifest (first 160 lines)"
          sed -n '1,160p' combined/$VERSION/manifest.json
          echo "::endgroup::"
          echo "::group::Build counts"
          jq '.builds | length as $c | "Total builds: \($c)"' combined/$VERSION/manifest.json
          echo "::endgroup::"
          echo "::group::Duplicate build name check"
          jq -r '.builds[].name' combined/$VERSION/manifest.json | sort | uniq -d | sed 's/^/DUPLICATE: /' || true
          echo "::endgroup::"
          echo "::group::Combined directory listing"
          find combined/$VERSION -maxdepth 1 -type f -printf '%f (%s bytes)\\n'
          echo "::endgroup::"
      - name: Upload combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.combined-name }}
          path: combined
      - name: Delete device artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const prefix = '${{ needs.prepare.outputs.artifact-prefix }}-';
            const {owner, repo} = context.repo;
            const artifacts = await github.paginate(
              github.rest.actions.listArtifactsForRepo,
              { owner, repo, per_page: 100 }
            );
            for (const art of artifacts) {
              if (!art.expired && art.name.startsWith(prefix)) {
                core.info(`Deleting ${art.name}`);
                await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
              }
            }
      - name: Failure dump (combine)
        if: failure() && inputs.debug == true
        run: |
            echo "::group::Failure dump (combine job)"
            find . -maxdepth 5 -type f -printf '%P (%s bytes)\\n' | head -800
            echo "::endgroup::"