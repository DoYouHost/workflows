name: Build

on:
  workflow_call:
    inputs:
      files:
        description: Newline separated list of files to build
        required: true
        type: string
      esphome-version:
        description: Version of ESPHome to build with
        required: false
        type: string
        default: latest
      release-summary:
        description: Summary of the release
        required: false
        type: string
        default: ""
      release-url:
        description: URL to the release notes
        required: false
        type: string
        default: ""
      release-version:
        description: Version of the release
        required: false
        type: string
        default: ""
      combined-name:
        description: Combine all files into a single manifest under this name
        required: false
        type: string
        default: ""

    outputs:
      version:
        description: Version of the firmware generated
        value: ${{ jobs.prepare.outputs.version }}

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.files-array.outputs.files }}
      version: ${{ steps.version.outputs.version }}
      artifact-prefix: ${{ steps.artifact-name.outputs.artifact-prefix }}
    steps:
      - name: Split files input into JSON array
        id: files-array
        run: |
          files=$(echo "${{ inputs.files }}" | jq -RcSn '[inputs | select(length>0)]')
          echo files=$files >> $GITHUB_OUTPUT
      - name: Generate version
        id: version
        run: |
          if [ -n "${{ inputs.release-version }}" ]; then
            version=${{ inputs.release-version }}
          else
            version=dev-$(date +'%Y%m%d-%H%M')
          fi

          echo version=$version >> $GITHUB_OUTPUT
      - name: Generated random artifact prefix
        id: artifact-name
        run: |
          artifact_prefix=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 16; echo)
          echo artifact-prefix=$artifact_prefix >> $GITHUB_OUTPUT

  build:
    name: ${{ matrix.file }}
    needs: [prepare]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        file: ${{ fromJson(needs.prepare.outputs.files) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
      - name: Replace project version
        run: |
          sed -i "s/version: dev/version: ${{ needs.prepare.outputs.version }}/g" ${{ matrix.file }}
      - name: Build Firmware
        uses: esphome/build-action@v7.0.0
        id: esphome-build
        with:
          yaml-file: ${{ matrix.file }}
          version: ${{ inputs.esphome-version }}
          complete-manifest: true
          release-summary: ${{ inputs.release-summary }}
          release-url: ${{ inputs.release-url }}
      - name: Move files for versioning
        run: |
          mkdir -p output/${{ needs.prepare.outputs.version }}
          mv ${{ steps.esphome-build.outputs.name }}/* output/${{ needs.prepare.outputs.version }}/
      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          # yamllint disable-line rule:line-length
          name: ${{ inputs.combined-name != '' && format('{0}-{1}', needs.prepare.outputs.artifact-prefix, steps.esphome-build.outputs.name) || steps.esphome-build.outputs.original-name }}
          path: output

  combine:
    name: Combine manifests
    needs:
      - prepare
      - build
    runs-on: ubuntu-latest
    if: inputs.combined-name != ''
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v5.0.0
        with:
          path: files
          pattern: ${{ needs.prepare.outputs.artifact-prefix }}-*

      - name: Get artifact names
        id: artifacts
        run: |
          artifacts=$(ls --format=single-column files)
          echo "artifacts<<EOF" >> $GITHUB_OUTPUT
          echo "$artifacts" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Delete prefixed artifacts
        uses: geekyeggo/delete-artifact@v5.1.0
        with:
          name: ${{ steps.artifacts.outputs.artifacts }}

      - name: Debug - Check file structure
        run: |
          echo "=== Debug: File structure analysis ==="
          echo "Version: ${{ needs.prepare.outputs.version }}"
          echo "Current directory: $(pwd)"
          echo ""
          echo "Files directory contents:"
          ls -la files/
          echo ""
          echo "Checking each device directory:"
          for device in files/*; do
            if [ -d "$device" ]; then
              echo "========================================="
              echo "Device: $(basename $device)"
              echo "Contents of $device:"
              ls -la "$device/"
              echo ""
              echo "Looking for version directory: ${{ needs.prepare.outputs.version }}"
              if [ -d "$device/${{ needs.prepare.outputs.version }}" ]; then
                echo "✅ Found: $device/${{ needs.prepare.outputs.version }}"
                ls -la "$device/${{ needs.prepare.outputs.version }}/"
              else
                echo "❌ NOT found: $device/${{ needs.prepare.outputs.version }}"
              fi
              echo ""
              echo "Looking for output/version directory: output/${{ needs.prepare.outputs.version }}"
              if [ -d "$device/output/${{ needs.prepare.outputs.version }}" ]; then
                echo "✅ Found: $device/output/${{ needs.prepare.outputs.version }}"
                ls -la "$device/output/${{ needs.prepare.outputs.version }}/"
              else
                echo "❌ NOT found: $device/output/${{ needs.prepare.outputs.version }}"
              fi
              echo ""
            fi
          done
          echo "========================================="

      - name: Combine all parts into a single manifest
        run: |
          version="${{ needs.prepare.outputs.version }}"
          mkdir -p "output/$version"
          pushd files

          # Check if we have version directories directly (new structure)
          if [ -d "$version" ]; then
            echo "Found version directory directly: $version"
            cp "$version"/* "../output/$version/"
          else
            # Fallback to old structure (device/version)
            for device in *; do
              pushd $device
              if [ -d "$version" ]; then
                pushd $version
                cp * "../../../output/$version/"
                popd
              elif [ -d "output/$version" ]; then
                pushd "output/$version"
                cp * "../../../output/$version/"
                popd
              fi
              popd
            done
          fi

          popd

          # Handle manifest.json combining
          if [ -f "files/$version/manifest.json" ]; then
            # Direct version structure
            cp "files/$version/manifest.json" "output/$version/manifest.json"
          else
            # Old structure - combine manifests
            jq -s '(.[0] | del(.builds)) + {"builds": (reduce .[].builds as $b ([]; . + $b))}' \
              files/*/$version/manifest.json files/*/output/$version/manifest.json > output/$version/manifest.json 2>/dev/null || \
            jq -s '(.[0] | del(.builds)) + {"builds": (reduce .[].builds as $b ([]; . + $b))}' \
              files/*/$version/manifest.json > output/$version/manifest.json 2>/dev/null || \
            jq -s '(.[0] | del(.builds)) + {"builds": (reduce .[].builds as $b ([]; . + $b))}' \
              files/*/output/$version/manifest.json > output/$version/manifest.json
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ inputs.combined-name }}
          path: output