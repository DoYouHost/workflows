name: Upload firmware to GitHub Release

on:
  workflow_call:
    inputs:
      version:
        description: Version of the release
        required: true
        type: string
      description:
        description: Description of the release
        required: false
        type: string
      prerelease:
        description: Whether this is a prerelease
        required: false
        default: false
        type: boolean
    secrets:
      PAT_TOKEN:
        description: 'Optional Personal Access Token for creating releases'
        required: false

jobs:
  upload:
    name: Upload
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Artifact(s)
        uses: actions/download-artifact@v5
        with:
          path: files

      - name: Assemble output (no checksums)
        run: |
          set -euo pipefail
          version='${{ inputs.version }}'
          mkdir -p output
          echo "::group::Input artifact tree"
          find files -maxdepth 4 -type f -print
          echo "::endgroup::"

          mapfile -t version_dirs < <(find files -type d -path "*/$version")
          if [ ${#version_dirs[@]} -eq 0 ]; then
            echo "ERROR: no version dirs for $version" >&2
            exit 1
          fi

          manifest_copied=false
          for d in "${version_dirs[@]}"; do
            if [ -f "$d/manifest.json" ] && [ "$manifest_copied" = false ]; then
              cp "$d/manifest.json" output/manifest.json
              manifest_copied=true
              echo "Using manifest from: $d"
            fi
            for f in "$d"/*.{bin,elf}; do
              [ -f "$f" ] || continue
              cp "$f" "output/$(basename "$f")"
            done
          done

          if [ "$manifest_copied" = false ]; then
            echo "ERROR: manifest.json not found" >&2
            exit 1
          fi

          echo "::group::Output listing"
          ls -l output
          echo "::endgroup::"

      - name: Upload files to release
        uses: softprops/action-gh-release@v2
        with:
          files: output/*
          tag_name: ${{ inputs.version }}
          draft: false
          prerelease: ${{ inputs.prerelease }}
          body: ${{ inputs.description }}
          token: ${{ secrets.PAT_TOKEN || github.token }}